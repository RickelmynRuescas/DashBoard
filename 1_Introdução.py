# pages/1_Introdu√ß√£o.py
# -*- coding: utf-8 -*-

import os
import time
import pandas as pd
import streamlit as st
import base64

# --- FUN√á√ÉO DE BACKGROUND ---
    
def set_background_image_with_blur(image_file):
    with open(image_file, "rb") as f:
        encoded = base64.b64encode(f.read()).decode()
    st.markdown(
        f"""
        <style>
        [data-testid="stAppViewContainer"] {{
            position: relative;
            z-index: 0;
        }}
        [data-testid="stAppViewContainer"]::before {{
            content: "";
            background-image: url("data:image/png;base64,{encoded}");
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
            background-position: center;
            filter: blur(8px) brightness(0.5);
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )
    
    
set_background_image_with_blur("BackGround/Dasa.png")

# ======= (Opcional) Lottie para dar vida =======
try:
    from streamlit_lottie import st_lottie
    _HAS_LOTTIE = True
except Exception:
    _HAS_LOTTIE = False

# ----------------- Config -----------------
st.set_page_config(
    page_title="Introdu√ß√£o | Estoque Inteligente (QR ‚Üí ML)",
    page_icon="üì¶",
    layout="wide",
)

# ----------------- Header -----------------
colA, colB = st.columns([0.75, 0.25])
with colA:
    st.title("üì¶ StockFlow - Estoque Inteligente em Tempo Real (QR ‚Üí ML)")
    st.caption("Automa√ß√£o do apontamento de consumo de insumos via c√¢mera ‚Äî DASA")

    # ----------------- Infogr√°fico do Pipeline (N O V O) -----------------
st.divider()
st.subheader("üîé Pipeline de Captura ‚Üí Detec√ß√£o ‚Üí Reconhecimento ‚Üí Informa√ß√£o em Tempo Real")

# tente primeiro a imagem corrigida; se n√£o existir, usa um fallback
candidate_paths = [
    "images/scan.png",   # coloque aqui a imagem corrigida
    
]
pipeline_img = next((p for p in candidate_paths if os.path.exists(p)), None)

IMG_WIDTH = st.slider("Largura da imagem (px)", 380, 900, 700 , 10)
st.image(pipeline_img, width=IMG_WIDTH)


with st.expander("O que este pipeline entrega na pr√°tica?"):
    st.markdown("""
- **(1) Visualiza√ß√£o:** c√¢mera cobre a √°rea de prateleiras do almoxarifado/sala.  
- **(2) Detec√ß√£o/Identifica√ß√£o:** o sistema destaca regi√µes de interesse e extrai **cor, textura e propor√ß√£o**.  
- **(3) Reconhecimento:** compara caracter√≠sticas e confirma o item (ex.: soro, seringa).  
- **(4) Informa√ß√£o em Tempo Real:** atualiza **estoque**, sinaliza **m√≠nimos** e **validade**, e registra a **baixa/entrada**.
""")


# ----------------- Objetivo -----------------
st.subheader("Objetivo")
st.write(
    "Dar **visibilidade em tempo real** ao consumo de insumos e **automatizar** entradas/sa√≠das, "
    "reduzindo o erro humano e suportando decis√µes de **reposi√ß√£o** e **validade**."
)

# ----------------- Abas: Ideia Central -----------------
tab_qr, tab_ml = st.tabs(["üü© Fase 1 ‚Äî QR/Barcode (agora)", "üü¶ Fase 2 ‚Äî Machine Learning (futuro)"])

with tab_qr:
    st.markdown("""
**Como funciona (MVP):**  
A c√¢mera l√™ o **QR/c√≥digo de barras** do insumo ao passar por uma √°rea de leitura ‚Üí o sistema registra **baixa/entrada autom√°tica** ‚Üí o painel mostra **estoque atual**, **alertas de m√≠nimo** e **validade**.

**Por que come√ßar por aqui?**  
- Baixo custo e alta viabilidade.  
- Reduz digita√ß√£o e erros imediatamente.  
- Serve como fallback mesmo quando houver ML.
    """)
    pros, cons = st.columns(2)
    with pros:
        st.success("**Pr√≥s:** simples, barato, confi√°vel; ganho r√°pido de produtividade.")
    with cons:
        st.warning("**Aten√ß√£o:** precisa de etiqueta no insumo; ainda n√£o reconhece por imagem.")

with tab_ml:
    st.markdown("""
**Como funciona (evolu√ß√£o):**  
Usamos **vis√£o computacional** para **classificar/detectar** o insumo pela imagem (embalagem, formato, r√≥tulo), "
"sem necessidade de etiqueta. Com **tracking + linha virtual**, registramos **entrada √ó sa√≠da** automaticamente.

**Por que evoluir?**  
- Remove depend√™ncia de etiqueta.  
- Reconhece m√∫ltiplos itens na cena, com contagem.
    """)
    pros2, cons2 = st.columns(2)
    with pros2:
        st.success("**Pr√≥s:** elimina etiquetas; vis√£o mais aut√¥noma e fluida.")
    with cons2:
        st.warning("**Aten√ß√£o:** precisa de **dataset**, valida√ß√£o e, √†s vezes, GPU. Maior complexidade.")

# ----------------- KPIs (mock) -----------------
st.divider()
st.subheader("üìä Vis√£o r√°pida (mock de KPIs)")

# Par√¢metros de simula√ß√£o
col1, col2, col3, col4 = st.columns(4)
with col1:
    eventos_mes = st.number_input("Eventos/m√™s (sa√≠das/entradas)", 100, 100000, 5000, step=100)
with col2:
    # CORRE√á√ÉO: slider em porcentagem inteira 0‚Äì20 e convers√£o para fra√ß√£o
    erro_manual_pct = st.slider("Erro manual atual (estimado)", 0, 20, 8, 1, format="%d%%")
    erro_manual = erro_manual_pct / 100.0
with col3:
    adocao_qr = st.slider("Ado√ß√£o QR/Barcode (fase 1)", 0, 100, 70, 5, format="%d%%")
with col4:
    adocao_ml = st.slider("Ado√ß√£o ML (fase 2)", 0, 100, 0, 5, format="%d%%")

# C√°lculo simples
erros_atuais = int(eventos_mes * erro_manual)
redu_qr = int(erros_atuais * (adocao_qr/100) * 0.75)   # suposi√ß√£o: QR reduz 75% dos erros nas √°reas cobertas
redu_ml = int(erros_atuais * (adocao_ml/100) * 0.90)   # suposi√ß√£o: ML reduz 90% dos erros nas √°reas cobertas
erros_proj = max(erros_atuais - redu_qr - redu_ml, 0)

m1, m2, m3 = st.columns(3)
m1.metric("Erros/m√™s (estimado - hoje)", f"{erros_atuais:,}".replace(",", "."))
m2.metric("Erros/m√™s (proje√ß√£o com QR‚ÜíML)", f"{erros_proj:,}".replace(",", "."), delta=f"-{(erros_atuais-erros_proj):,}".replace(",", "."))
m3.metric("Automa√ß√£o prevista", f"{adocao_qr + adocao_ml}%")

# Gr√°fico
df_plot = pd.DataFrame({
    "Cen√°rio": ["Hoje (manual)", "Com QR", "Com QR + ML"],
    "Erros": [erros_atuais, max(erros_atuais - redu_qr, 0), erros_proj],
})
st.bar_chart(df_plot, x="Cen√°rio", y="Erros", use_container_width=True)

# ----------------- Mini ‚Äúreplay‚Äù do pipeline -----------------
st.divider()
st.subheader("üß™ Mini replay do pipeline (QR ‚Üí ML)")

colL, colR = st.columns([0.55, 0.45])
with colL:
    modo = st.radio("Selecione o modo para visualizar o fluxo:", ["QR/Barcode", "Machine Learning"], horizontal=True)
    if st.button("‚ñ∂Ô∏è Executar replay"):
        with st.spinner("Iniciando captura de c√¢mera..."):
            time.sleep(0.6)
        st.toast("üé• C√¢mera conectada", icon="‚úÖ")
        time.sleep(0.4)
        if modo == "QR/Barcode":
            st.info("üîç Lendo c√≥digo QR/Barcode...", icon="üîé")
            time.sleep(0.8)
            st.success("‚úÖ C√≥digo identificado: INS-002 (Swab est√©ril)")
            time.sleep(0.6)
            st.info("üì¶ A√ß√£o: **BAIXA** no estoque (1 unidade)")
            time.sleep(0.5)
            st.success("üíæ Evento registrado (timestamp, SKU, a√ß√£o)")
        else:
            st.info("üß† Rodando modelo de classifica√ß√£o/detec√ß√£o...", icon="üß†")
            time.sleep(0.8)
            st.success("‚úÖ Classe detectada: **Seringa 5ml** (conf. 0.94)")
            time.sleep(0.6)
            st.info("‚ÜîÔ∏è Tracking + linha virtual: dire√ß√£o detectada ‚Üí **SA√çDA**")
            time.sleep(0.6)
            st.success("üíæ Evento registrado (timestamp, classe, confian√ßa, a√ß√£o)")

with colR:
    st.markdown("**Fluxo esperado:**")
    steps = [
        "1) Captura de imagem (c√¢mera IP/USB)", 
        "2) Reconhecimento (QR) ou Classifica√ß√£o/Detec√ß√£o (ML)",    
        "3) Regras de neg√≥cio (baixa/entrada, m√≠nimos, validade)",
        "4) Persist√™ncia (log/DB) e atualiza√ß√£o de painel",
        "5) KPIs e alertas em tempo real",
    ]
    for s in steps:
        st.write("‚Ä¢ " + s)

# ----------------- Navega√ß√£o -----------------
st.info("Esta p√°gina apresenta a **introdu√ß√£o**. As pr√≥ximas p√°ginas aprofundam solu√ß√£o, prot√≥tipos e m√©tricas.")

