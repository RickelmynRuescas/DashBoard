# pages/3_Pipeline.py
# -*- coding: utf-8 -*-

import streamlit as st
import time
import base64

# --- FUN√á√ÉO DE BACKGROUND ---
    
def set_background_image_with_blur(image_file):
    with open(image_file, "rb") as f:
        encoded = base64.b64encode(f.read()).decode()
    st.markdown(
        f"""
        <style>
        [data-testid="stAppViewContainer"] {{
            position: relative;
            z-index: 0;
        }}
        [data-testid="stAppViewContainer"]::before {{
            content: "";
            background-image: url("data:image/png;base64,{encoded}");
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
            background-position: center;
            filter: blur(8px) brightness(0.5);
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )
    
    
set_background_image_with_blur("BackGround/Dasa.png")

# ----------------- Config -----------------
st.set_page_config(
    page_title="Pipeline da Solu√ß√£o | Estoque Inteligente (QR ‚Üí ML)",
    page_icon="üîÑ",
    layout="wide",
)

# ----------------- Header -----------------
st.title("üîÑ Pipeline da Solu√ß√£o ‚Äî QR ‚Üí ML")
st.caption("Fluxo interativo do processo de automa√ß√£o do estoque")

st.markdown("""
Aqui mostramos o **passo a passo** do fluxo da solu√ß√£o, do momento em que o insumo passa pela c√¢mera at√© aparecer no painel do almoxarifado.
""")

# ----------------- Cards de explica√ß√£o -----------------
st.subheader("üìç Etapas do Pipeline")

col1, col2, col3 = st.columns(3)
with col1:
    st.markdown("### 1Ô∏è‚É£ Captura da imagem")
    st.info("C√¢mera capta a passagem do insumo (entrada ou sa√≠da).")

    st.markdown("### 2Ô∏è‚É£ Reconhecimento")
    st.info("Leitura de **QR/Barcode** (fase inicial) ou **Machine Learning** (futuro).")

with col2:
    st.markdown("### 3Ô∏è‚É£ Regras de neg√≥cio")
    st.info("Define se foi **entrada** ou **baixa**, valida quantidade m√≠nima e validade.")

    st.markdown("### 4Ô∏è‚É£ Atualiza√ß√£o")
    st.info("Estoque atualizado automaticamente em tempo real.")

with col3:
    st.markdown("### 5Ô∏è‚É£ Painel")
    st.info("Interface mostra saldos, alertas de ruptura e validade.")

st.divider()

# ----------------- Inserindo a imagem -----------------
st.subheader("üì∏ Exemplo ilustrativo do pipeline em a√ß√£o")
st.image(
    "images/camera_qr.png",
    caption="C√¢mera captando insumo com QR Code no almoxarifado",
    width=700  # üîΩ ajusta a largura da imagem
)


# ----------------- Simula√ß√£o Interativa -----------------
st.subheader("‚ñ∂Ô∏è Simula√ß√£o do Pipeline")

if st.button("Executar pipeline passo a passo"):
    with st.spinner("1Ô∏è‚É£ Capturando imagem..."):
        time.sleep(1.2)
    st.success("‚úÖ Imagem capturada pela c√¢mera.")

    with st.spinner("2Ô∏è‚É£ Reconhecendo insumo..."):
        time.sleep(1.2)
    st.success("‚úÖ Insumo identificado: *Seringa 5ml* (via QR).")

    with st.spinner("3Ô∏è‚É£ Aplicando regras de neg√≥cio..."):
        time.sleep(1.2)
    st.success("‚úÖ Baixa registrada (1 unidade).")

    with st.spinner("4Ô∏è‚É£ Atualizando estoque..."):
        time.sleep(1.2)
    st.success("‚úÖ Estoque atualizado: 99 unidades restantes.")

    with st.spinner("5Ô∏è‚É£ Exibindo no painel..."):
        time.sleep(1.2)
    st.success("‚úÖ Painel atualizado com alerta: Estoque pr√≥ximo do m√≠nimo.")

st.info("Essa simula√ß√£o demonstra como o fluxo automatizado elimina erros e atualiza o sistema em tempo real.")

# ----------------- Navega√ß√£o -----------------
st.divider()
